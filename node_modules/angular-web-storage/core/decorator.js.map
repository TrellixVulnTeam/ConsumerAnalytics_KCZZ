{"version":3,"sources":["../../src/core/decorator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,WAAW,EAAE,MAAM,QAAQ,CAAC;AAElD;;;;;;;;GAQG;AACH,MAAM,uBAAuB,GAAY,EAAE,SAAqB,EAAE,WAA8B;IAArD,0BAAA,EAAA,aAAqB;IAAE,4BAAA,EAAA,iBAA8B;IAC5F,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,GAAG,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;AACjE,CAAC;AAED;;;;;;GAMG;AACH,MAAM,yBAAyB,GAAY;IACvC,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;AAC3C,CAAC;AAMD,IAAI,KAAK,GAAW,EAAE,CAAC;AACvB,IAAM,UAAU,GAAG,UAAC,OAAgB,EAAE,GAAW,EAAE,SAAqB,EAAE,WAA8B;IAArD,0BAAA,EAAA,aAAqB;IAAE,4BAAA,EAAA,iBAA8B;IACpG,MAAM,CAAC,UAAC,MAAc,EAAE,YAAoB;QACxC,GAAG,GAAG,GAAG,IAAI,YAAY,CAAC;QAC1B,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE;YACxC,GAAG,EAAE;gBACD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAU,GAAG,CAAC,CAAC;YACjD,CAAC;YACD,GAAG,EAAE,UAAC,KAAU;gBACZ,EAAE,CAAC,CAAC,CAAC,KAAK,CAAS,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,EAAU,GAAG,CAAC,CAAC;oBAC1D,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;wBACvB,WAAW,CAAC,GAAG,CAAC,OAAO,EAAU,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;oBACzE,CAAC;oBACD,KAAK,CAAS,GAAG,CAAC,GAAG,IAAI,CAAC;oBAC1B,MAAM,CAAC;gBACX,CAAC;gBACD,WAAW,CAAC,GAAG,CAAC,OAAO,EAAU,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;YACzE,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC,CAAC;AACN,CAAC,CAAC","file":"decorator.js","sourceRoot":"","sourcesContent":["import { ExpiredUnit, StorageUtil } from \"./util\";\r\n\r\n/**\r\n * localStorage 装饰器\r\n * \r\n * @export\r\n * @param {string} [key] 指定一个新key\r\n * @param {number} [expiredAt=0] 过期时间值，0表示永久有效。\r\n * @param {ExpiredUnit} [expiredUnit='t'] 过期时间单位（默认：自定义[单位：毫秒]）\r\n * @returns \r\n */\r\nexport function LocalStorage(key?: string, expiredAt: number = 0, expiredUnit: ExpiredUnit = 't') {\r\n    return WebStorage(localStorage, key, expiredAt, expiredUnit);\r\n}\r\n\r\n/**\r\n * sessionStorage 装饰器\r\n * \r\n * @export\r\n * @param {string} [key] 指定一个新key\r\n * @returns \r\n */\r\nexport function SessionStorage(key?: string) {\r\n    return WebStorage(sessionStorage, key);\r\n}\r\n\r\ninterface ICache {\r\n    [key: string]: boolean;\r\n}\r\n\r\nlet cache: ICache = {};\r\nconst WebStorage = (storage: Storage, key: string, expiredAt: number = 0, expiredUnit: ExpiredUnit = 'd') => {\r\n    return (target: Object, propertyName: string): void => {\r\n        key = key || propertyName;\r\n        Object.defineProperty(target, propertyName, {\r\n            get: () => {\r\n                return StorageUtil.get(storage, <string>key);\r\n            },\r\n            set: (value: any) => {\r\n                if (!cache[<string>key]) {\r\n                    const storedValue = StorageUtil.get(storage, <string>key);\r\n                    if (storedValue === null) {\r\n                        StorageUtil.set(storage, <string>key, value, expiredAt, expiredUnit);\r\n                    }\r\n                    cache[<string>key] = true;\r\n                    return;\r\n                }\r\n                StorageUtil.set(storage, <string>key, value, expiredAt, expiredUnit);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        })\r\n    };\r\n};\r\n"]}